
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "ANNOTATION EE ELSE GE ID IF INT LE NE NUM NUMF READ REAL WHILE WRITEprogram : statement_liststatement_list : statement_list statementstatement_list : statement : expression_stmtstatement : compound_stmtstatement : selection_stmtstatement : iteration_stmtstatement : var_declarationstatement : write_stmtstatement : read_stmtwrite_stmt : WRITE '(' expression ')' read_stmt : READ '(' ID ')' compound_stmt : '{' local_declarations statement_list '}' local_declarations : local_declarations var_declarationlocal_declarations : var_declaration : type_specifier ID ';' var_declaration : type_specifier ID '[' NUM ']' ';' var_declaration : type_specifier ID '=' expression ';' type_specifier : INTtype_specifier : REALexpression_stmt : expression ';' expression_stmt : ';' selection_stmt : IF '(' expression ')' statementselection_stmt : IF '(' expression ')' statement ELSE statementiteration_stmt : WHILE '(' expression ')' statementexpression : var '=' expressionexpression : simple_expressionexpression : '[' array ']' array : array_listarray :  array_list : array_list ',' array_list array_list : factor var : ID var : ID '[' expression ']' simple_expression : additive_expression relop additive_expressionsimple_expression : additive_expressionrelop : LErelop : '<' relop : '>' relop : GErelop : EErelop : NEadditive_expression : additive_expression addop termadditive_expression : termaddop : '+' addop : '-' term : term mulop factorterm : factor mulop : '*'  mulop : '/' factor : '(' expression ')' factor : varfactor : NUMfactor : NUMF"
    
_lr_action_items = {',':([13,19,29,54,56,57,66,76,83,],[-33,-53,-54,-52,74,-32,-51,-34,74,]),'$end':([0,1,2,7,12,15,18,20,21,23,24,30,31,63,75,77,82,84,86,87,88,90,],[-3,-1,0,-7,-2,-6,-4,-9,-22,-8,-5,-10,-21,-16,-12,-11,-13,-18,-23,-25,-17,-24,]),'REAL':([0,1,7,12,15,18,20,21,23,24,27,30,31,53,63,71,72,75,77,80,81,82,84,86,87,88,89,90,],[-3,4,-7,-2,-6,-4,-9,-22,-8,-5,-15,-10,-21,4,-16,-14,4,-12,-11,4,4,-13,-18,-23,-25,-17,4,-24,]),'INT':([0,1,7,12,15,18,20,21,23,24,27,30,31,53,63,71,72,75,77,80,81,82,84,86,87,88,89,90,],[-3,6,-7,-2,-6,-4,-9,-22,-8,-5,-15,-10,-21,6,-16,-14,6,-12,-11,6,6,-13,-18,-23,-25,-17,6,-24,]),'GE':([9,10,11,13,19,25,29,54,59,66,68,76,],[-44,-48,-52,-33,-53,49,-54,-52,-47,-51,-43,-34,]),'NUM':([0,1,7,12,15,17,18,20,21,23,24,27,28,30,31,33,34,35,36,37,38,41,42,43,44,45,46,47,48,49,50,51,52,53,63,64,65,71,72,74,75,77,80,81,82,84,86,87,88,89,90,],[-3,19,-7,-2,-6,19,-4,-9,-22,-8,-5,-15,19,-10,-21,19,-50,-49,19,19,19,19,-41,19,19,-38,-37,-39,-46,-40,-45,-42,19,-3,-16,19,79,-14,19,19,-12,-11,19,19,-13,-18,-23,-25,-17,19,-24,]),'=':([11,13,39,76,],[36,-33,64,-34,]),'<':([9,10,11,13,19,25,29,54,59,66,68,76,],[-44,-48,-52,-33,-53,45,-54,-52,-47,-51,-43,-34,]),'READ':([0,1,7,12,15,18,20,21,23,24,27,30,31,53,63,71,72,75,77,80,81,82,84,86,87,88,89,90,],[-3,8,-7,-2,-6,-4,-9,-22,-8,-5,-15,-10,-21,-3,-16,-14,8,-12,-11,8,8,-13,-18,-23,-25,-17,8,-24,]),'LE':([9,10,11,13,19,25,29,54,59,66,68,76,],[-44,-48,-52,-33,-53,46,-54,-52,-47,-51,-43,-34,]),'-':([9,10,11,13,19,25,29,54,59,66,68,69,76,],[-44,-48,-52,-33,-53,48,-54,-52,-47,-51,-43,48,-34,]),'/':([9,10,11,13,19,29,54,59,66,68,76,],[34,-48,-52,-33,-53,-54,-52,-47,-51,34,-34,]),'ID':([0,1,4,6,7,12,15,16,17,18,20,21,23,24,27,28,30,31,32,33,34,35,36,37,38,41,42,43,44,45,46,47,48,49,50,51,52,53,63,64,71,72,74,75,77,80,81,82,84,86,87,88,89,90,],[-3,13,-20,-19,-7,-2,-6,39,13,-4,-9,-22,-8,-5,-15,13,-10,-21,58,13,-50,-49,13,13,13,13,-41,13,13,-38,-37,-39,-46,-40,-45,-42,13,-3,-16,13,-14,13,13,-12,-11,13,13,-13,-18,-23,-25,-17,13,-24,]),'WRITE':([0,1,7,12,15,18,20,21,23,24,27,30,31,53,63,71,72,75,77,80,81,82,84,86,87,88,89,90,],[-3,14,-7,-2,-6,-4,-9,-22,-8,-5,-15,-10,-21,-3,-16,-14,14,-12,-11,14,14,-13,-18,-23,-25,-17,14,-24,]),'}':([7,12,15,18,20,21,23,24,27,30,31,53,63,71,72,75,77,82,84,86,87,88,90,],[-7,-2,-6,-4,-9,-22,-8,-5,-15,-10,-21,-3,-16,-14,82,-12,-11,-13,-18,-23,-25,-17,-24,]),'[':([0,1,7,12,13,15,17,18,20,21,23,24,27,30,31,36,37,38,39,41,52,53,63,64,71,72,75,77,80,81,82,84,86,87,88,89,90,],[-3,28,-7,-2,37,-6,28,-4,-9,-22,-8,-5,-15,-10,-21,28,28,28,65,28,28,-3,-16,28,-14,28,-12,-11,28,28,-13,-18,-23,-25,-17,28,-24,]),'(':([0,1,7,8,12,14,15,17,18,20,21,22,23,24,26,27,28,30,31,33,34,35,36,37,38,41,42,43,44,45,46,47,48,49,50,51,52,53,63,64,71,72,74,75,77,80,81,82,84,86,87,88,89,90,],[-3,17,-7,32,-2,38,-6,17,-4,-9,-22,41,-8,-5,52,-15,17,-10,-21,17,-50,-49,17,17,17,17,-41,17,17,-38,-37,-39,-46,-40,-45,-42,17,-3,-16,17,-14,17,17,-12,-11,17,17,-13,-18,-23,-25,-17,17,-24,]),'*':([9,10,11,13,19,29,54,59,66,68,76,],[35,-48,-52,-33,-53,-54,-52,-47,-51,35,-34,]),')':([3,9,10,11,13,19,25,29,40,54,58,59,60,62,66,67,68,69,70,73,76,],[-27,-44,-48,-52,-33,-53,-36,-54,66,-52,75,-47,-26,77,-51,80,-43,-35,81,-28,-34,]),'IF':([0,1,7,12,15,18,20,21,23,24,27,30,31,53,63,71,72,75,77,80,81,82,84,86,87,88,89,90,],[-3,22,-7,-2,-6,-4,-9,-22,-8,-5,-15,-10,-21,-3,-16,-14,22,-12,-11,22,22,-13,-18,-23,-25,-17,22,-24,]),';':([0,1,3,5,7,9,10,11,12,13,15,18,19,20,21,23,24,25,27,29,30,31,39,53,54,59,60,63,66,68,69,71,72,73,75,76,77,78,80,81,82,84,85,86,87,88,89,90,],[-3,21,-27,31,-7,-44,-48,-52,-2,-33,-6,-4,-53,-9,-22,-8,-5,-36,-15,-54,-10,-21,63,-3,-52,-47,-26,-16,-51,-43,-35,-14,21,-28,-12,-34,-11,84,21,21,-13,-18,88,-23,-25,-17,21,-24,]),']':([3,9,10,11,13,19,25,28,29,54,55,56,57,59,60,61,66,68,69,73,76,79,83,],[-27,-44,-48,-52,-33,-53,-36,-30,-54,-52,73,-29,-32,-47,-26,76,-51,-43,-35,-28,-34,85,-31,]),'EE':([9,10,11,13,19,25,29,54,59,66,68,76,],[-44,-48,-52,-33,-53,42,-54,-52,-47,-51,-43,-34,]),'ELSE':([7,15,18,20,21,23,24,30,31,63,75,77,82,84,86,87,88,90,],[-7,-6,-4,-9,-22,-8,-5,-10,-21,-16,-12,-11,-13,-18,89,-25,-17,-24,]),'WHILE':([0,1,7,12,15,18,20,21,23,24,27,30,31,53,63,71,72,75,77,80,81,82,84,86,87,88,89,90,],[-3,26,-7,-2,-6,-4,-9,-22,-8,-5,-15,-10,-21,-3,-16,-14,26,-12,-11,26,26,-13,-18,-23,-25,-17,26,-24,]),'>':([9,10,11,13,19,25,29,54,59,66,68,76,],[-44,-48,-52,-33,-53,47,-54,-52,-47,-51,-43,-34,]),'{':([0,1,7,12,15,18,20,21,23,24,27,30,31,53,63,71,72,75,77,80,81,82,84,86,87,88,89,90,],[-3,27,-7,-2,-6,-4,-9,-22,-8,-5,-15,-10,-21,-3,-16,-14,27,-12,-11,27,27,-13,-18,-23,-25,-17,27,-24,]),'+':([9,10,11,13,19,25,29,54,59,66,68,69,76,],[-44,-48,-52,-33,-53,50,-54,-52,-47,-51,-43,50,-34,]),'NUMF':([0,1,7,12,15,17,18,20,21,23,24,27,28,30,31,33,34,35,36,37,38,41,42,43,44,45,46,47,48,49,50,51,52,53,63,64,71,72,74,75,77,80,81,82,84,86,87,88,89,90,],[-3,29,-7,-2,-6,29,-4,-9,-22,-8,-5,-15,29,-10,-21,29,-50,-49,29,29,29,29,-41,29,29,-38,-37,-39,-46,-40,-45,-42,29,-3,-16,29,-14,29,29,-12,-11,29,29,-13,-18,-23,-25,-17,29,-24,]),'NE':([9,10,11,13,19,25,29,54,59,66,68,76,],[-44,-48,-52,-33,-53,51,-54,-52,-47,-51,-43,-34,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'simple_expression':([1,17,36,37,38,41,52,64,72,80,81,89,],[3,3,3,3,3,3,3,3,3,3,3,3,]),'local_declarations':([27,],[53,]),'expression':([1,17,36,37,38,41,52,64,72,80,81,89,],[5,40,60,61,62,67,70,78,5,5,5,5,]),'mulop':([9,68,],[33,33,]),'additive_expression':([1,17,36,37,38,41,44,52,64,72,80,81,89,],[25,25,25,25,25,25,69,25,25,25,25,25,25,]),'var':([1,17,28,33,36,37,38,41,43,44,52,64,72,74,80,81,89,],[11,11,54,54,11,11,11,11,54,54,11,11,11,54,11,11,11,]),'iteration_stmt':([1,72,80,81,89,],[7,7,7,7,7,]),'factor':([1,17,28,33,36,37,38,41,43,44,52,64,72,74,80,81,89,],[10,10,57,59,10,10,10,10,10,10,10,10,10,57,10,10,10,]),'relop':([25,],[44,]),'statement':([1,72,80,81,89,],[12,12,86,87,90,]),'compound_stmt':([1,72,80,81,89,],[24,24,24,24,24,]),'selection_stmt':([1,72,80,81,89,],[15,15,15,15,15,]),'type_specifier':([1,53,72,80,81,89,],[16,16,16,16,16,16,]),'expression_stmt':([1,72,80,81,89,],[18,18,18,18,18,]),'write_stmt':([1,72,80,81,89,],[20,20,20,20,20,]),'statement_list':([0,53,],[1,72,]),'var_declaration':([1,53,72,80,81,89,],[23,71,23,23,23,23,]),'addop':([25,69,],[43,43,]),'term':([1,17,36,37,38,41,43,44,52,64,72,80,81,89,],[9,9,9,9,9,9,68,9,9,9,9,9,9,9,]),'array':([28,],[55,]),'array_list':([28,74,],[56,83,]),'read_stmt':([1,72,80,81,89,],[30,30,30,30,30,]),'program':([0,],[2,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program_1','c_grammar.py',100),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list_1','c_grammar.py',104),
  ('statement_list -> <empty>','statement_list',0,'p_statement_list_empty','c_grammar.py',108),
  ('statement -> expression_stmt','statement',1,'p_statement_1','c_grammar.py',112),
  ('statement -> compound_stmt','statement',1,'p_statement_2','c_grammar.py',117),
  ('statement -> selection_stmt','statement',1,'p_statement_3','c_grammar.py',122),
  ('statement -> iteration_stmt','statement',1,'p_statement_4','c_grammar.py',127),
  ('statement -> var_declaration','statement',1,'p_statement_5','c_grammar.py',132),
  ('statement -> write_stmt','statement',1,'p_statement_6','c_grammar.py',137),
  ('statement -> read_stmt','statement',1,'p_statement_7','c_grammar.py',142),
  ('write_stmt -> WRITE ( expression )','write_stmt',4,'p_write_stmt_1','c_grammar.py',147),
  ('read_stmt -> READ ( ID )','read_stmt',4,'p_read_stmt_1','c_grammar.py',152),
  ('compound_stmt -> { local_declarations statement_list }','compound_stmt',4,'p_compound_stmt_1','c_grammar.py',157),
  ('local_declarations -> local_declarations var_declaration','local_declarations',2,'p_local_declarations_1','c_grammar.py',162),
  ('local_declarations -> <empty>','local_declarations',0,'p_local_declarations_empty','c_grammar.py',167),
  ('var_declaration -> type_specifier ID ;','var_declaration',3,'p_var_declaration_1','c_grammar.py',171),
  ('var_declaration -> type_specifier ID [ NUM ] ;','var_declaration',6,'p_var_declaration_2','c_grammar.py',176),
  ('var_declaration -> type_specifier ID = expression ;','var_declaration',5,'p_var_declaration_3','c_grammar.py',181),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier_1','c_grammar.py',186),
  ('type_specifier -> REAL','type_specifier',1,'p_type_specifier_2','c_grammar.py',191),
  ('expression_stmt -> expression ;','expression_stmt',2,'p_expression_stmt_1','c_grammar.py',196),
  ('expression_stmt -> ;','expression_stmt',1,'p_expression_stmt_2','c_grammar.py',201),
  ('selection_stmt -> IF ( expression ) statement','selection_stmt',5,'p_selection_stmt_1','c_grammar.py',206),
  ('selection_stmt -> IF ( expression ) statement ELSE statement','selection_stmt',7,'p_selection_stmt_2','c_grammar.py',211),
  ('iteration_stmt -> WHILE ( expression ) statement','iteration_stmt',5,'p_iteration_stmt_1','c_grammar.py',216),
  ('expression -> var = expression','expression',3,'p_expression_1','c_grammar.py',221),
  ('expression -> simple_expression','expression',1,'p_expression_2','c_grammar.py',226),
  ('expression -> [ array ]','expression',3,'p_expression_3','c_grammar.py',230),
  ('array -> array_list','array',1,'p_array_1','c_grammar.py',234),
  ('array -> <empty>','array',0,'p_array_empty','c_grammar.py',239),
  ('array_list -> array_list , array_list','array_list',3,'p_array_list_1','c_grammar.py',243),
  ('array_list -> factor','array_list',1,'p_arg_list_2','c_grammar.py',248),
  ('var -> ID','var',1,'p_var_1','c_grammar.py',253),
  ('var -> ID [ expression ]','var',4,'p_var_2','c_grammar.py',258),
  ('simple_expression -> additive_expression relop additive_expression','simple_expression',3,'p_simple_expression_1','c_grammar.py',263),
  ('simple_expression -> additive_expression','simple_expression',1,'p_simple_expression_2','c_grammar.py',268),
  ('relop -> LE','relop',1,'p_relop_1','c_grammar.py',273),
  ('relop -> <','relop',1,'p_relop_2','c_grammar.py',278),
  ('relop -> >','relop',1,'p_relop_3','c_grammar.py',283),
  ('relop -> GE','relop',1,'p_relop_4','c_grammar.py',288),
  ('relop -> EE','relop',1,'p_relop_5','c_grammar.py',293),
  ('relop -> NE','relop',1,'p_relop_6','c_grammar.py',298),
  ('additive_expression -> additive_expression addop term','additive_expression',3,'p_additive_expression_1','c_grammar.py',303),
  ('additive_expression -> term','additive_expression',1,'p_additive_expression_2','c_grammar.py',308),
  ('addop -> +','addop',1,'p_addop_1','c_grammar.py',313),
  ('addop -> -','addop',1,'p_addop_2','c_grammar.py',318),
  ('term -> term mulop factor','term',3,'p_term_1','c_grammar.py',323),
  ('term -> factor','term',1,'p_term_2','c_grammar.py',328),
  ('mulop -> *','mulop',1,'p_mulop_1','c_grammar.py',333),
  ('mulop -> /','mulop',1,'p_mulop_2','c_grammar.py',338),
  ('factor -> ( expression )','factor',3,'p_factor_1','c_grammar.py',343),
  ('factor -> var','factor',1,'p_factor_2','c_grammar.py',348),
  ('factor -> NUM','factor',1,'p_factor_3','c_grammar.py',353),
  ('factor -> NUMF','factor',1,'p_factor_4','c_grammar.py',358),
]
